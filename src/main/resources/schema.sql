drop table if exists USERS, ITEMS, REQUEST, BOOKINGS, COMMENTS;

create table if not exists USERS (
    id              BIGINT generated by default as identity,
    name            VARCHAR(255),
    email           VARCHAR(512),
    constraint UNIQUE_EMAIL UNIQUE (email),
    constraint USERS_PK primary key (id)
);


create table if not exists REQUEST (
    id              BIGINT generated by default as identity,
    description     VARCHAR(1024),
    created         TIMESTAMP WITHOUT TIME ZONE,
    requestor_id    BIGINT,
    constraint REQUEST_PK primary key (id),
    constraint REQUEST_USERS_REQUESTOR_ID_FK foreign key (requestor_id) references USERS(id) ON DELETE CASCADE
);

create table if not exists ITEMS (
    id              BIGINT generated by default as identity,
    name            VARCHAR(255),
    description     VARCHAR(1024),
    available       Boolean,
    owner_id        BIGINT,
    request_id      BIGINT,
    constraint ITEMS_PK primary key (id),
    constraint ITEMS_USERS_OWNER_ID_FK foreign key (owner_id) references USERS(id) ON DELETE CASCADE,
    constraint ITEMS_REQUEST_REQUEST_ID_FK foreign key (request_id) references REQUEST(id) ON DELETE CASCADE
);

create table if not exists BOOKINGS (
    id              BIGINT generated by default as identity,
    start_date      TIMESTAMP WITHOUT TIME ZONE,
    end_date        TIMESTAMP WITHOUT TIME ZONE,
    item_id         BIGINT,
    booker_id       BIGINT,
    status          VARCHAR(16),
    constraint BOOKINGS_PK primary key (id),
    constraint BOOKINGS_USERS_BOOKER_ID_FK foreign key (booker_id) references USERS(id) ON DELETE CASCADE,
    constraint BOOKINGS_ITEMS_ITEMS_ID_FK foreign key (item_id) references ITEMS(id) ON DELETE CASCADE
);

create table if not exists COMMENTS (
    id              BIGINT generated by default as identity,
    text            VARCHAR(255),
    item_id         BIGINT,
    author_id       BIGINT,
    created         TIMESTAMP WITHOUT TIME ZONE,
    constraint COMMENTS_PK primary key (id),
    constraint COMMENTS_USERS_BOOKER_ID_FK foreign key (author_id) references USERS(id) ON DELETE CASCADE,
    constraint COMMENTS_ITEMS_ITEMS_ID_FK foreign key (item_id) references ITEMS(id) ON DELETE CASCADE
);

CREATE UNIQUE INDEX users_id_idx ON USERS (id);
CREATE INDEX users_name_idx ON USERS(name);
CREATE UNIQUE INDEX items_id_idx ON ITEMS (id);
CREATE UNIQUE INDEX comments_id_idx ON COMMENTS (id);
CREATE UNIQUE INDEX bookings_id_idx ON BOOKINGS (id);
